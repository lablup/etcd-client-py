name: default

on:
  push:
  pull_request:
  merge_group:

jobs:
  release-linux-x86_64:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: ["x86_64"]
        manylinux: ["auto"]
        python-version: ["3.10", "3.11"]
    steps:
      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
      - name: Checkout the source tree
        uses: actions/checkout@v3
      - name: Build the wheel and source distribution
        uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release -o dist -i python${{ matrix.python-version }}
          manylinux: ${{ matrix.manylinux }}
          target: ${{ matrix.target }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  release-linux-aarch64:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: ["aarch64"]
        manylinux: ["auto"]
        python-version: ["3.10", "3.11"]
    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      - name: Checkout the source tree
        uses: actions/checkout@v3
      - name: Build the wheel and source distribution
        uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release -o dist -i python${{ matrix.python-version }}
          before-script-linux: |
            sudo apt-get update
            sudo apt-get install -y protobuf-compiler
          manylinux: ${{ matrix.manylinux }}
          target: ${{ matrix.target }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  release-macos:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]
    steps:
      - name: Checkout the source tree
        uses: actions/checkout@v3
      - name: Install prerequisites
        run: |
          brew install protobuf
      - name: Build the wheel and source distribution
        uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release -o dist --universal2 -i python${{ matrix.python-version }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  release-source:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the source tree
        uses: actions/checkout@v3
      - name: Set up Python as Runtime
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Build the source distribution
        run: |
          pip install -U pip setuptools
          pip install -U build
          python -m build --sdist
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  publish-to-pypi:
    needs: [release-linux-x86_64, release-linux-aarch64, release-macos, release-source]
    environment: deploy-to-pypi
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist
      - name: Set up Python as Runtime
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install the publish toolchain
        run: |
          pip install -U pip setuptools
          pip install -U twine
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload dist/*.whl dist/*.tar.gz
