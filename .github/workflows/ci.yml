name: CI

on:
  push:
    branches:
      - 'main'
      - '[0-9]+.[0-9]+'
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
  pull_request:
  merge_group:

jobs:

  test:
    strategy:
      fail-fast: false
      matrix:
        platform: [
          {os: "ubuntu-22.04", arch: "x86_64", etcd_arch: "amd64"},
          {os: "ubuntu-22.04-arm64", arch: "aarch64", etcd_arch: "arm64"},
        ]
        python-version: ["3.11", "3.12", "3.13"]
    runs-on: ${{ matrix.platform.os }}
    steps:
    - name: Checkout the revision
      uses: actions/checkout@v4
    - name: Install etcd
      run: |
        wget https://github.com/etcd-io/etcd/releases/download/v3.5.18/etcd-v3.5.18-linux-${{ matrix.platform.etcd_arch }}.tar.gz
        tar -xzf etcd-v3.5.18-linux-${{ matrix.platform.etcd_arch }}.tar.gz
        mv etcd-v3.5.18-linux-${{ matrix.platform.etcd_arch }}/etcd* /usr/local/bin/
    - name: Set up Python as Runtime
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set up Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    - name: Install protobuf compiler
      run: |
        sudo apt install -y protobuf-compiler
    - name: Install dependencies and build the package
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        python -m maturin build
        python -m pip install .
    - name: Test
      run: |
        python -m pytest

  release-linux:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    strategy:
      fail-fast: false
      matrix:
        platform: [
          {os: "ubuntu-22.04", arch: "x86_64", maturin_arch: "x86_64"},
          {os: "ubuntu-22.04-arm64", arch: "aarch64", maturin_arch: "aarch_64"},
        ]
        manylinux: ["manylinux2014"]
        python-version: ["3.11", "3.12", "3.13"]
    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout the revision
        uses: actions/checkout@v4
      - name: Build the wheel
        uses: PyO3/maturin-action@v1
        env:
          PROTOC: /home/runner/.local/bin/protoc
        with:
          command: build
          args: --release -o dist -i python${{ matrix.python-version }}
          before-script-linux: |
            PB_REL="https://github.com/protocolbuffers/protobuf/releases"
            curl -LO $PB_REL/download/v23.2/protoc-23.2-linux-${{ matrix.platform.maturin_arch }}.zip
            unzip protoc-23.2-linux-${{ matrix.platform.maturin_arch }}.zip -d $HOME/.local
            export PATH="$PATH:$HOME/.local/bin"
          manylinux: ${{ matrix.manylinux }}
          target: ${{ matrix.platform.arch }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.manylinux }}-${{ matrix.platform.arch }}-${{ matrix.python-version }}
          path: dist

  release-macos:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
    steps:
      - name: Checkout the revision
        uses: actions/checkout@v4
      - name: Install prerequisites
        run: |
          brew install protobuf
      - name: Build the wheel
        uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release -o dist --target universal2-apple-darwin -i python${{ matrix.python-version }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-universal2-${{ matrix.python-version }}
          path: dist/*

  release-source:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the revision
        uses: actions/checkout@v4
      - name: Set up Python as Runtime
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Build the source distribution
        run: |
          pip install -U pip setuptools
          pip install -U build
          python -m build --sdist
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-src
          path: dist

  publish-to-pypi:
    needs: [release-linux-x86_64, release-linux-aarch64, release-macos, release-source]
    environment: deploy-to-pypi
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
